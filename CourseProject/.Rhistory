x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y > 0]
x[x > 0]
-- x[!is.na(x) & x > 0]
x[!is.na(x) & x > 0]
x[c(3,5,7)]
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2, -10)]
x[-c(2, 10)]
vect <- c(foo = 11, bar = 2, norf = NA)
vect
names(vect)
vect2 <- c(11, 2, NA)
names(vect2) <- c("foo", "bar", "norf")
identical(vect, vect2)
vect["bar"]
vect[c("foo", "bar")]
my_vector <- (1:20)
my_vector <- c(1:20)
my_vector <- seq(1:20)
info()
my_vector <- (1:20)
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4, 5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <-  my_vector
?matrix()
?matrix
my_matrix2 <-  matrix(data = 1:20, nrow = 4, ncol = 5)
identical(my_matrix, my_matrix2)
patients <- c("Bill", "Gina", "Kelly", "Sean")
cbind(patients, my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
cnames <- c("patient", "age", "weight", "bp", "rating", "test")
colnames(cnames)
colnames(my_data) <- cnames
my_data
bye()
q()
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
colmean(airquality)
colmean(airquality, FALSE)
search()
source('~/.active-rstudio-document')
cube <- make.power(3)
square <- make.power(2)
cube(3)
square(3)
ls(environment(cube))
get("n", environment(cube))
ls(environment(square))
get("n", environment(square))
x <- 1:4, y <- 6:9
x <- 1:4; y <- 6:9
x
y
x+y
x <- 1:3
y <- 4:5
x
y
x+y
x <- matrix(1:3)
y <- matric(4:5)
y <- matrix(4:5)
x+y
x  * y
date
x <- date()
x
time
y <- POSIXlt()
y <- Sys.time()
x
class(x)
p <- as.POSIXlt(x)
unclass(x)
p <- as.POSIXlt(x)
datestring <- c("January 10, 2012 10:40", "December 9, 2011")
x <strptime(datastring, "%B %d, %Y %H:%M")
x <strptime(datestring, "%B %d, %Y %H:%M")
x <- strptime(datestring, "%B %d, %Y %H:%M")
x
class(x)
>strptime
?strptime
x <- as.Date("2012-01-01")
y <- strptime("9 Jan 2011 11:34:21", "%d %b %Y %H:%M:%S")
x - y
x <- as.POSIXlt(x)
x-y
lappyy()
lappyly
x <- list(a=1:5, b=rnotm(10))
x <- list(a=1:5, b=rnorm(10))
lapply(x,mean)
b
x <- x(rnorm(10), runif(10), rnorm(10,1))
x <- c(rnorm(10), runif(10), rnorm(10,1))
x
f <- g1(3, 10)
f <- gi(3, 10)
g < gl(3,10)
f <- gl(3,10)
f
tapply(x, f, mean)
tapply(x, f, mean, simplify=FALSE)
x <- c(rnorm(10), runif(10), rnorm(10,1))
f < gl(3, 10)
f <- gl(3,10)
split(x, f)
lappy(solit(x,f), mean)
lappy(split(x,f), mean)
lapply(split(x,f), mean)
tapply(split(x,f), mean)
library(datasets)
head(airquality)
s <- split(airquality, airquality$Month)
lapply(s,function(x) colMeans(x[,c("Ozone","Solar.R", "Wind")]))
tapply(s,function(x) colMeans(x[,c("Ozone","Solar.R", "Wind")]))
str(ls)
x <- rnorm(100, 2,4)
x
summary(x)
str(x)
str(airquality)
m <- matrix(rnorm(100), 10, 10)
str(m)
s <- split(airquality, airquality$Month)
s
str(s)
n <- 50
rnorm(n, mean = 0, sd = 1)
x <- rnorm(10)
x
x <- rnotm(10, 20, 2)
x <- rnorm(10, 20, 2)
set.seed(1)
rnorm(5)
rnorm(5)
dset.seed(1)
set.seed(1)
rnorm(5)
set.seed(20)
x <- rnorm(100)
e <- rnorm(100,0,2)
y <- 0.5 + 2  * x + e
summary(y)
plot(x,y)
q()
proc_time()
proc_time
system.time(readlines("http://www.jhsph.edu"))
system.time(readLines("http://www.jhsph.edu"))
source('C:/Rwd-coursera/functions.R')
source('C:/Rwd-coursera/functions.R', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
x <- hilbert(1000)
system.time(svd(x))
system.time(svd(x))
system.time({})
sample.interval
cube <- function(x, n) {
x^3
}
cube(3)
x <- 1:10
if(x > 5) {
x <- 0
}
x <- 1:10
if(x > 5) {
x <- 3
}
x <- 1:10
if(x > 5) {
print(x)}
x < 1:10
x <- 1:10
x
if (x > 5)
{ print x}
x <- 1:10
if (x > 20)
{ x <- 0}
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z <- 10
f(3)
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
y
set.seed(1)
rpois(5, 2)
set.seed(10)
x <- rbinom(10, 10, 0.5)
e <- rnorm(10, 0, 20)
y <- 0.5 + 2 * x + e
y
summary(y)
library(datasets)
Rprof()
fit <- lm(y ~ x1 + x2)
x1 <- 10
x2 <- 1
fit <- lm(y ~ x1 + x2)
Rprof(NULL)
library(swirl)
swirl()
5 + 7
x <- 5 + 7
x
y <- x - 3
y
z <- c(1.1, 9, 3.14)
?c
z
c(z, 555, z)
z * 2 + 100
my_sqrt <- sqrt(z - 1)
my_sqrt
my_div <- z / my_sqrt
my_div
c(1, 2, 3, 4) + c(0, 10)
c(1, 2, 3, 4) + c(0, 10, 100)
c(1, 2, 3, 4) + c(0, 10, 1000)
z * 2 + 1000
my_div
1:20
pi:10
15:1
?`:`
seq(1, 20)
seq(0, 10, by=0.5)
my_seq <- seq(5, 10, length=30)
length(my_seq)
1:length(my_seq)
seq(along = my_seq)
seq_along(my_seq)
rep(0, times = 40)
rep(c(0, 1, 2), times = 10)
rep(c(0, 1, 2), each = 10)
num_vect <- c(0.5, 55, -10, 6)
tf <- num_vect < 1
tf
num_vect >= 6
my_char <- c("My", "name", "is")
my_char
paste(my_char, collapse = " ")
my_name <- c(my_char, "Kumar N P")
my_name
paste(my_name, collapse = " ")
paste("Hello", "world!", sep = " ")
paste(1:3, c("X", "Y", "Z"), sep = "")
paste(LETTERS, 1:4, sep = "-")
x <- c(44, NA, 5, NA)
x * 3
y <- rnorm(1000)
z <- rep(NA, 1000)
my_data <- sample(c(y, z), 100)
my_na <- is.na(my_data)
my_na
my_data == NA
sum(my_na)
my_data
0 / 0
Inf - Inf
x
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y > 0]
x[x > 0]
x[!is.na(x) & x > 0]
bye()
q()
swirl()
library(swirl)
swirl()
x
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y > 0]
x[x > 0]
x[!is.na(x) & x > 0]
x[c(3, 5, 7)]
x[0]
x[3000]
x[c(-2, -10)]
x[-c(2, 10)]
vect <- c(foo = 11, bar = 2, norf = NA)
vect
names(vect)
vect2 <- c(11, 2, NA)
names(vect2) <- c("foo", "bar", "norf")
identical(vect, vect2)
identical(vect, vect2)
vect["bar"]
vect[c("foo", "bar")]
my_vector <- c(1:20)
my_vector <- (1:20)
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4, 5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?matrix()
?matrix
my_matrix2 <-  matrix(data = 1:20, nrow = 4, ncol = 5)
identical(my_matrix, my_matrix2)
patients <- c("Bill", "Gina", "Kelly", "Sean")
cbind(patients, my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
cnames <- c("patient", "age", "weight", "bp", "rating", "test")
colnames(my_data)
colnames(my_data) <- cnames
my_data
sessionInfo()
bye()
q()
install.packages("xlsx")
install.packages("XLConnect")
q()
library(xlsx)
q()
.libPaths()
library("xlsx")
library("XLConnect")
q()
.libPaths()
install.packages("XML")
library(xml)
library(XML)
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml"
xmlDoc <- xmlTreeParse(fileUrl, useInternal=TRUE)
xmlDoc <- xmlTreeParse(fileUrl, useInternal=TRUE)
fileUrl <- "http://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml"
fileUrl
xmlDoc <- xmlTreeParse(fileUrl, useInternal=TRUE)
xmlDoc
rootNode <- xmlRoot(xmlDoc)
names(rootNode)
rootNode
rootNode
names(rootNode)
rootNode[[1]]
rootNode[[1][1]]
rootNode[[1]][[1]]
xpathApply(rootNode, "//zipcode", xmlValue)
zipCodes <- xpathApply(rootNode, "//zipcode", xmlValue)
length(zipcodes)
length(zipCodes)
zipCodeQ4 <- zipCodes == 21231
zipCodeQ4
nrow(zipCodeQ4)
length(zipCodeQ4)
zipCodes <- xpathApply(rootNode, "//zipcode", xmlValue)
table(zipCodes == 21231)
install.packages("fread")
q()
install.packages("fread")
library(fread)
?fread
??fread
install.packages("data.table")
q()
.libPaths()
install.packages("jsonlite")
library(jsonlite)
library(sqldf)
install.packages(sqldf)
install.packages("sqldf")
install.packages("sqldf")
q()
install.packages("sqldf")
library(httr)
require(httpuv)
require(jsonlite)
install.packages("httpuv")
q()
library(httr)
require(httpuv)
require(jsonlite)
oauth_endpoints("github")
myapp <- oauth_app("quiz2", "a23e045f26b5fa7bea0d", secret = "918af5d630ddcf87210f27633a2eeaa975241d47")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
myapp <- oauth_app("quiz2", "a23e045f26b5fa7bea0d", secret = "918af5d630ddcf87210f27633a2eeaa975241d47")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
q()
library(httr)
require(httpuv)
require(jsonlite)
myapp <- oauth_app("quiz2", "ddb0d599de51ccd02f4b", secret = "6af1109f6ecf442d292425087d49bb13d9bbe9c8")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
req <- GET("https://api.github.com/users/jtleek/repos", config(token = github_token))
q()
library(httr)
require(httpuv)
require(jsonlite)
myapp <- oauth_app("quiz2", "ddb0d599de51ccd02f4b", secret = "6af1109f6ecf442d292425087d49bb13d9bbe9c8")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
myapp <- oauth_app("quiz2", "a23e045f26b5fa7bea0d", secret = "918af5d630ddcf87210f27633a2eeaa975241d47")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
library(httr)
require(httpuv)
require(jsonlite)
auth_endpoints("github")
q()
library(httr)
require(httpuv)
require(jsonlite)
oauth_endpoints("github")
myapp <- oauth_app("quiz2", "a23e045f26b5fa7bea0d", secret = "150249662bb4a8090f0ef522381036ada9768d35")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
myapp <- oauth_app("quiz2", "ddb0d599de51ccd02f4b", secret = "6af1109f6ecf442d292425087d49bb13d9bbe9c8")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
req <- GET("https://api.github.com/users/jtleek/repos", config(token = github_token))
top_for_status(req)
stop_for_status(req)
output <- content(req)
list(output[[4]]$name, output[[4]]$created_at)
content(req)
q()
library(jpeg)
q()
install.packages("melt")
install.packages("MELT")
library(rshape2)
library(reshape2)
mtcars$carname <- rownames(mtcars)
carMelt <- melt(mtcars,id=c("carname", "gear","cyl"),measure.vars=c("mpg", "hp"))
head(carMelt, n=3)
q()
setwd("C:/Getting-and-Cleaning-Data")
DataPath <- file.path(paste(getwd(),"/UCI HAR Dataset", sep = ""))
DataPath
list.files(DataPath, recursive = TRUE)
DataPath
DataPath <- file.path(paste(getwd(),"/UCI HAR Dataset/", sep = ""))
DataPath
setwd("C:/Getting-and-Cleaning-Data/CourseProject")
DataPath <- file.path(paste(getwd(),"/UCI HAR Dataset", sep = ""))
DataPath
list.files(DataPath, recursive = TRUE)
list.files(DataPath, recursive = TRUE)
list.dirs(DataPath, recursive = TRUE)
TrainDataPath <- "./UCI HAR Dataset/train/"
TestDataPath <- "./UCI HAR Dataset/test/"
FeaturesDataPath <- "./UCI HAR Dataset/"
ActivityLabelPath <- "./UCI HAR Dataset/"
AnalysisResultPath <-  "./AnalysisResult/"
Result_Tidy_File <- paste0(AnalysisResultPath, "Tidy_Data.txt")
Result_TidyAvg_File <- paste0(AnalysisResultPath, "Tidy_Avg_Data.txt")
if (!file.exists(AnalysisResultPath)) {
dir.create(AnalysisResultPath)
}
library(data.table)
library(reshape2)
ActivityLabels <- read.table(paste0(ActivityLabelPath, "activity_labels.txt"), header=FALSE, stringsAsFactors=FALSE)
FeaturesData <- read.table(paste0(FeaturesDataPath, "features.txt"), header=FALSE, stringsAsFactors=FALSE)
Train_X_Data <- read.table(paste0(TrainDataPath, "X_train.txt"), header=FALSE)
Train_Subject <- read.table(paste0(TrainDataPath, "subject_train.txt"), header=FALSE)
Train_Y_Label <- read.table(paste0(TrainDataPath, "Y_train.txt"), header=FALSE)
Test_X_Data <- read.table(paste0(TestDataPath, "X_test.txt"), header=FALSE)
Test_Subject <- read.table(paste0(TestDataPath, "subject_test.txt"), header=FALSE)
Test_Y_Label <- read.table(paste0(TestDataPath, "Y_test.txt"), header=FALSE)
Train_df <- data.frame(Activity = factor(Train_Y_Label$V1, labels = ActivityLabels$V2))
TrainData <- cbind(Train_df, Train_Subject, Train_X_Data)
Test_df <- data.frame(Activity = factor(Test_Y_Label$V1, labels = ActivityLabels$V2))
TestData <- cbind(Test_df, Test_Subject, Test_X_Data)
TestTrain_Data <- rbind(TestData, TrainData)
names(TestTrain_Data) <- c("Activity", "Subject", FeaturesData[,2])
Sub_TidyData <-  FeaturesData$V2[grep("mean\\(\\)|std\\(\\)",  FeaturesData$V2)]
Tidy_Data <- TestTrain_Data[c("Activity", "Subject", Sub_TidyData)]
write.table(Tidy_Data, file=Result_Tidy_File, row.names=FALSE)
Melt_Data <- melt(Tidy_Data, id=c("Activity", "Subject"), measure.vars=Sub_TidyData)
Tidy_Avg_Data <- dcast(Melt_Data, Activity + Subject ~ variable, mean)
write.table(Tidy_Avg_Data, file=Result_TidyAvg_File, row.names=FALSE)
